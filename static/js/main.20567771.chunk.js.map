{"version":3,"sources":["assets/svg/frontend.svg","assets/svg/mobile.svg","assets/svg/backend.svg","AnimateTextContainer/AnimateTextContainer.js","TopTitleContainer/TopTitleContainer.js","SkillsContainer/SkillsContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AnimateTextContainer","props","strText","textIntervals","index","this","length","currentChar","spanElement","document","createElement","innerHTML","strId","setAttribute","style","position","width","transitionDuration","left","top","getElementById","appendChild","animate","animatedChar","interval","setInterval","Math","floor","random","push","clearInterval","loadText","id","className","React","Component","TopTitleContainer","SkillsContainer","src","svgFrontend","svgBackend","svgMobile","App","Container","fluid","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,oRCGtBC,G,8FAGnB,8BAAYC,GAAQ,IAAD,iDACjB,cAAMA,IAHRC,QAAU,sBAES,EADnBC,cAAgB,GACG,E,mFAKjB,IAAK,IAAIC,EAAQ,EAAGA,EAAQC,KAAKH,QAAQI,OAAQF,IAAS,CACxD,IAAMG,EAAcF,KAAKH,QAAQE,GAC3BI,EAAcC,SAASC,cAAc,OAAQ,IACnDF,EAAYG,UAAYJ,EACxB,IAAMK,EAAQ,OAASR,EAAQ,KAC/BI,EAAYK,aAAa,KAAMD,GAC/BJ,EAAYM,MAAMC,SAAW,WAC7BP,EAAYM,MAAME,MAAQ,OAC1BR,EAAYM,MAAMG,mBAAqB,KACnCb,GAAS,GAAiC,MAA5BC,KAAKH,QAAQE,EAAQ,KACrCI,EAAYM,MAAME,MAAQ,QAE5BR,EAAYM,MAAMI,KAAe,GAARd,EAAa,KACtCI,EAAYM,MAAMK,IAAM,MACMV,SAASW,eAAe,kBAChCC,YAAYb,GAEpCH,KAAKiB,Y,wCAGL,IADS,IAAD,wBACClB,GACP,IAAMQ,EAAQ,OAASR,EAAQ,KACzBmB,EAAed,SAASW,eAAeR,GACvCY,EAAWC,aAAY,WACI,QAA3BF,EAAaT,MAAMK,IACrBI,EAAaT,MAAMK,IAAM,QAEzBI,EAAaT,MAAMK,IAAM,IAE1BO,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,KACrC,EAAKzB,cAAc0B,KAAKL,IAVjBpB,EAAQ,EAAGA,EAAQC,KAAKH,QAAQI,OAAQF,IAAU,EAAlDA,K,kDAcT,IAAK,IAAIA,EAAQ,EAAGA,EAAQC,KAAKF,cAAcG,OAAQF,IAAS,CAC9D,IAAMoB,EAAWnB,KAAKF,cAAcC,GACpC0B,cAAcN,M,4DAKhBnB,KAAK0B,a,sCAGL,OACE,yBAAKC,GAAG,iBAAiBC,UAAU,sB,sBArDSC,IAAMC,YCkBzCC,MAhBf,SAASA,sCACL,OACI,yBAAKH,UAAU,uBACX,yBAAKA,UAAU,6BACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,wBACX,uR,2DCNKI,E,oPAEjB,OACE,yBAAKJ,UAAU,oBACb,yBAAKA,UAAU,0BACjB,yCAEE,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,mBACb,yBAAKK,IAAKC,OAEZ,yBAAKN,UAAU,mBACb,yBAAKK,IAAKE,OAEZ,yBAAKP,UAAU,mBACb,yBAAKK,IAAKG,a,iBAfuBP,IAAMC,WCoBpCO,MAnBf,SAASA,UACP,OACE,yBAAKT,UAAU,OACb,kBAACU,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,WCNQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAASW,eAAe,SDwHnB,SAASmC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YCzH5BP,K","file":"static/js/main.20567771.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/frontend.705168e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/mobile.08d93d60.svg\";","module.exports = __webpack_public_path__ + \"static/media/backend.799d5a6c.svg\";","import React from 'react';\r\nimport './AnimateTextContainer.scss';\r\n\r\nexport default class AnimateTextContainer extends React.Component {\r\n  strText = \"FULL STACK ENGINEER\";\r\n  textIntervals = [];\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  /* Custom Methods */\r\n  loadText() {\r\n    for (let index = 0; index < this.strText.length; index++) {\r\n      const currentChar = this.strText[index];\r\n      const spanElement = document.createElement(\"span\", []);\r\n      spanElement.innerHTML = currentChar;\r\n      const strId = \"text\" + index + \"Id\";\r\n      spanElement.setAttribute(\"id\", strId);\r\n      spanElement.style.position = \"absolute\";\r\n      spanElement.style.width = \"25px\";\r\n      spanElement.style.transitionDuration = \"1s\";\r\n      if (index >= 0 && this.strText[index - 1] === ' ') {\r\n        spanElement.style.width = \"16px\";\r\n      }\r\n      spanElement.style.left = index * 30 + 'px';\r\n      spanElement.style.top = \"0px\";\r\n      const animatedTextContainer = document.getElementById(\"animatedTextId\");\r\n      animatedTextContainer.appendChild(spanElement);\r\n    }\r\n    this.animate();\r\n  }\r\n  animate() {\r\n    for (let index = 0; index < this.strText.length; index++) {\r\n      const strId = \"text\" + index + \"Id\";\r\n      const animatedChar = document.getElementById(strId);\r\n      const interval = setInterval(() => {\r\n        if (animatedChar.style.top === \"0px\") {\r\n          animatedChar.style.top = '-20px';\r\n        } else {\r\n          animatedChar.style.top = 0;\r\n        }\r\n      }, Math.floor(Math.random() * 900) + 500);\r\n      this.textIntervals.push(interval);\r\n    }\r\n  }\r\n  clearAnimate() {\r\n    for (let index = 0; index < this.textIntervals.length; index++) {\r\n      const interval = this.textIntervals[index];\r\n      clearInterval(interval);\r\n    }\r\n  }\r\n  /* Lifecycle Events */\r\n  componentDidMount() {\r\n    this.loadText();\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"animatedTextId\" className=\"animated-text\">\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './TopTitleContainer.scss';\r\n\r\nimport AnimateTextContainer from '../AnimateTextContainer/AnimateTextContainer';\r\n\r\nfunction TopTitleContainer() {\r\n    return (\r\n        <div className=\"top-title-container\">\r\n            <div className=\"animated-heading centered\">\r\n                <AnimateTextContainer></AnimateTextContainer>\r\n            </div>\r\n            <div className=\"description centered\">\r\n                <span>Having 9 years of software development expertise in various domains like mobile and web development,\r\n                making effective use of Computer Engineering degree in my profession.\r\n                Currently working as a Lead Front End Engineer for Client Baker Hughes.\r\n            </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopTitleContainer;\r\n","import React from 'react';\r\nimport './SkillsContainer.scss';\r\nimport svgFrontend from '../assets/svg/frontend.svg';\r\nimport svgMobile from '../assets/svg/mobile.svg';\r\nimport svgBackend from '../assets/svg/backend.svg';\r\n\r\nexport default class SkillsContainer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"skills-container\">\r\n        <div className=\"skills-title-container\">\r\n      <span>SKILLS</span>\r\n        </div>\r\n        <div className=\"skills-image-container\">\r\n          <div className=\"image-container\">\r\n            <img src={svgFrontend} />\r\n          </div>\r\n          <div className=\"image-container\">\r\n            <img src={svgBackend} />\r\n          </div>\r\n          <div className=\"image-container\">\r\n            <img src={svgMobile} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport TopTitleContainer from './TopTitleContainer/TopTitleContainer';\nimport SkillsContainer from './SkillsContainer/SkillsContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Row>\n          <Col>\n            <TopTitleContainer></TopTitleContainer>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <SkillsContainer></SkillsContainer>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}